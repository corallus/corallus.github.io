{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/images/avatar.png","webpack:///./src/components/seo.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/navbar.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","NotFoundPage","a","createElement","title","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","React","InternalPageRenderer","Object","assign","json","p","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","loader","enqueue","createContext","Header","siteTitle","_useState","useState","expanded","setExpanded","react_default","Navbar","onToggle","bg","variant","expand","fixed","Brand","href","className","src","avatar","alt","Toggle","aria-controls","Collapse","id","Nav","onClick","map","section","gatsby_link_default","e","target","undefined","window","preventDefault","document","getElementById","scrollIntoView","behavior","block","_handleLinkClick","to","key","Layout","children","_856328897","Fragment","navbar","Date","getFullYear"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAaeQ,UARM,kBACnBJ,EAAAK,EAAAC,cAACJ,EAAA,EAAD,KACEF,EAAAK,EAAAC,cAACH,EAAA,EAAD,CAAKI,MAAM,mBACXP,EAAAK,EAAAC,cAAA,uBACAN,EAAAK,EAAAC,cAAA,2FCTJ,IAAsBE,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,0JCsBhCK,UAjBU,SAAAC,GAAiC,IAA9BC,EAA8BD,EAA9BC,SAAUC,EAAoBF,EAApBE,cACpC,OAAKA,EAGEC,IAAMX,cAAcY,IAApBC,OAAAC,OAAA,CACLL,WACAC,iBACGA,EAAcK,OALV,2BCPXZ,EAAAC,QAAiBd,EAAA0B,EAAuB,sICYxC,SAASC,EAATT,GAAiD,IAAlCU,EAAkCV,EAAlCU,YAAaC,EAAqBX,EAArBW,KAAMC,EAAeZ,EAAfY,KAAMnB,EAASO,EAATP,MAC9BoB,EADuCC,EAAAC,KACvCF,KAcFG,EAAkBN,GAAeG,EAAKI,aAAaP,YAEzD,OACEQ,EAAA3B,EAAAC,cAAC2B,EAAA5B,EAAD,CACE6B,eAAgB,CACdT,QAEFlB,MAAOA,EACP4B,cAAa,QAAUR,EAAKI,aAAaxB,MACzCmB,KAAM,CACJ,CACEU,KAAI,cACJC,QAASP,GAEX,CACEQ,SAAQ,WACRD,QAAS9B,GAEX,CACE+B,SAAQ,iBACRD,QAASP,GAEX,CACEQ,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASV,EAAKI,aAAaQ,QAE7B,CACEH,KAAI,gBACJC,QAAS9B,GAEX,CACE6B,KAAI,sBACJC,QAASP,IAEXU,OAAOd,KAKfH,EAAIkB,aAAe,CACjBhB,KAAI,KACJC,KAAM,GACNF,YAAW,IAUED,yNCzEUmB,QAAOC,QAEL1B,IAAM2B,cAAc,4CCVzCC,EAAS,SAAA/B,GAAmB,IAAhBgC,EAAgBhC,EAAhBgC,UAAgBC,EACAC,oBAAS,GAAlCC,EADyBF,EAAA,GACfG,EADeH,EAAA,GAUhC,OACEI,EAAA9C,EAAAC,cAAC8C,EAAA,EAAD,CAAQH,SAAUA,EAAUI,SAAU,kBAAMH,GAAaD,IAAWK,GAAG,UAAUC,QAAQ,OAAOC,OAAO,KAAKC,MAAM,OAChHN,EAAA9C,EAAAC,cAAC8C,EAAA,EAAOM,MAAR,CAAcC,KAAK,SACjBR,EAAA9C,EAAAC,cAAA,QAAMsD,UAAU,qBACbd,GAEHK,EAAA9C,EAAAC,cAAA,QAAMsD,UAAU,qBACdT,EAAA9C,EAAAC,cAAA,OAAKuD,IAAKC,IAAQF,UAAU,6DAA6DG,IAAI,cAGjGZ,EAAA9C,EAAAC,cAAC8C,EAAA,EAAOY,OAAR,CAAeC,gBAAc,qBAC7Bd,EAAA9C,EAAAC,cAAC8C,EAAA,EAAOc,SAAR,CAAiBC,GAAG,oBAClBhB,EAAA9C,EAAAC,cAAC8D,EAAA,EAAD,CAAKR,UAAU,UAAUS,QAAS,kBAAMnB,GAAY,KAbzC,CAAC,QAAS,YAAa,YAAa,SAAU,aAc7CoB,IAAI,SAAAC,GAAO,OACnBpB,EAAA9C,EAAAC,cAACkE,EAAAnE,EAAD,CACEgE,QAAS,SAAAI,GAAC,OAvBG,SAACA,EAAGC,QACLC,WAAXC,SACTH,EAAEI,iBACcC,SAASC,eAAeL,GAChCM,eAAe,CAAEC,SAAU,SAAUC,MAAO,WAmB9BC,CAAiBV,EAAGF,IAClCa,GAAI,KAAOb,EACXX,UAAU,WACVyB,IAAKd,GAEJA,SAaf1B,EAAOJ,aAAe,CACpBK,UAAS,IAGID,eCXAyC,IA7BA,SAAAxE,GAAkB,IAAfyE,EAAezE,EAAfyE,SACV1D,EAAI2D,EAAA3D,KAWV,OACEsB,EAAA9C,EAAAC,cAAA6C,EAAA9C,EAAAoF,SAAA,KACEtC,EAAA9C,EAAAC,cAACoF,EAAD,CAAQ5C,UAAWjB,EAAKF,KAAKI,aAAaxB,QAC1C4C,EAAA9C,EAAAC,cAAA,QAAMsD,UAAU,uBACb2B,GAEHpC,EAAA9C,EAAAC,cAAA,UAAQsD,UAAU,cAAlB,kBACiB,IAAI+B,MAAOC","file":"component---src-pages-404-js-3ee2c1d15ced210d215d.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","module.exports = __webpack_public_path__ + \"static/avatar-e5f6f8fda1a01f4101c69f82e5831ec9.png\";","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React, { useState } from \"react\"\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport avatar from \"../images/avatar.png\"\n\nconst Header = ({ siteTitle }) => {\n  const [expanded, setExpanded] = useState(false);\n  const _handleLinkClick = (e, target) => {\n    if (typeof window !== undefined) {\n      e.preventDefault()\n      const element = document.getElementById(target)\n      element.scrollIntoView({ behavior: 'smooth', block: 'start' })\n    }\n  }\n  const sections = ['about', 'education', 'portfolio', 'skills', 'interests']\n  return (\n    <Navbar expanded={expanded} onToggle={() => setExpanded(!expanded)} bg=\"primary\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\n      <Navbar.Brand href=\"#home\">\n        <span className=\"d-block d-lg-none\">\n          {siteTitle}\n        </span>\n        <span className=\"d-none d-lg-block\">\n          <img src={avatar} className=\"img-fluid img-profile rounded-circle border-1 mx-auto mb-2\" alt=\"portret\" />\n        </span>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\" onClick={() => setExpanded(false)}>\n          {sections.map(section =>\n            <Link\n              onClick={e => _handleLinkClick(e, section)}\n              to={'/#' + section}\n              className=\"nav-link\"\n              key={section}\n            >\n              {section}\n            </Link>\n          )}\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Header from \"./navbar\"\nimport '../style/theme.scss'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <main className=\"container-fluid p-0\">\n        {children}\n      </main>\n      <footer className=\"p-3 p-lg-5\">\n        Last updated: {new Date().getFullYear()}\n      </footer>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}